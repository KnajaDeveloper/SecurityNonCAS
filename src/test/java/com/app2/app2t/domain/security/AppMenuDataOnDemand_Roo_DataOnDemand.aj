// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app2.app2t.domain.security;

import com.app2.app2t.domain.security.AppMenu;
import com.app2.app2t.domain.security.AppMenuDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect AppMenuDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AppMenuDataOnDemand: @Component;
    
    private Random AppMenuDataOnDemand.rnd = new SecureRandom();
    
    private List<AppMenu> AppMenuDataOnDemand.data;
    
    public AppMenu AppMenuDataOnDemand.getNewTransientAppMenu(int index) {
        AppMenu obj = new AppMenu();
        setController(obj, index);
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setLink(obj, index);
        setMenuIcon(obj, index);
        setMenuLevel(obj, index);
        setMenu_e_name(obj, index);
        setMenu_t_name(obj, index);
        setParent(obj, index);
        setSegment(obj, index);
        setStatus(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void AppMenuDataOnDemand.setController(AppMenu obj, int index) {
        String controller = "controller_" + index;
        if (controller.length() > 100) {
            controller = controller.substring(0, 100);
        }
        obj.setController(controller);
    }
    
    public void AppMenuDataOnDemand.setCreatedBy(AppMenu obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void AppMenuDataOnDemand.setCreatedDate(AppMenu obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void AppMenuDataOnDemand.setLink(AppMenu obj, int index) {
        String link = "link_" + index;
        if (link.length() > 100) {
            link = link.substring(0, 100);
        }
        obj.setLink(link);
    }
    
    public void AppMenuDataOnDemand.setMenuIcon(AppMenu obj, int index) {
        String menuIcon = "menuIcon_" + index;
        if (menuIcon.length() > 40) {
            menuIcon = menuIcon.substring(0, 40);
        }
        obj.setMenuIcon(menuIcon);
    }
    
    public void AppMenuDataOnDemand.setMenuLevel(AppMenu obj, int index) {
        Integer menuLevel = new Integer(index);
        obj.setMenuLevel(menuLevel);
    }
    
    public void AppMenuDataOnDemand.setMenu_e_name(AppMenu obj, int index) {
        String menu_e_name = "menu_e_name_" + index;
        if (menu_e_name.length() > 40) {
            menu_e_name = menu_e_name.substring(0, 40);
        }
        obj.setMenu_e_name(menu_e_name);
    }
    
    public void AppMenuDataOnDemand.setMenu_t_name(AppMenu obj, int index) {
        String menu_t_name = "menu_t_name_" + index;
        if (menu_t_name.length() > 40) {
            menu_t_name = menu_t_name.substring(0, 40);
        }
        obj.setMenu_t_name(menu_t_name);
    }
    
    public void AppMenuDataOnDemand.setParent(AppMenu obj, int index) {
        Long parent = new Integer(index).longValue();
        obj.setParent(parent);
    }
    
    public void AppMenuDataOnDemand.setSegment(AppMenu obj, int index) {
        Integer segment = new Integer(index);
        obj.setSegment(segment);
    }
    
    public void AppMenuDataOnDemand.setStatus(AppMenu obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public void AppMenuDataOnDemand.setUpdatedBy(AppMenu obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void AppMenuDataOnDemand.setUpdatedDate(AppMenu obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public AppMenu AppMenuDataOnDemand.getSpecificAppMenu(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AppMenu obj = data.get(index);
        Long id = obj.getId();
        return AppMenu.findAppMenu(id);
    }
    
    public AppMenu AppMenuDataOnDemand.getRandomAppMenu() {
        init();
        AppMenu obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return AppMenu.findAppMenu(id);
    }
    
    public boolean AppMenuDataOnDemand.modifyAppMenu(AppMenu obj) {
        return false;
    }
    
    public void AppMenuDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = AppMenu.findAppMenuEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AppMenu' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AppMenu>();
        for (int i = 0; i < 10; i++) {
            AppMenu obj = getNewTransientAppMenu(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
