// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app2.app2t.domain.security;

import com.app2.app2t.domain.security.*;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.*;
import org.hibernate.exception.ConstraintViolationException;
import org.springframework.core.ConstantException;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;

privileged aspect AppMenu_Custom_Jpa_ActiveRecord {

    public static AppMenu AppMenu.insertAppMenu(String link, String menuTh, String menuEn, String controller, int menuLevel, int segment, long parent, String menuIcon) {
        AppMenu appMenu = new AppMenu();
        appMenu.setLink(link);
        appMenu.setMenu_t_name(menuTh);
        appMenu.setMenu_e_name(menuEn);
        appMenu.setController(controller);
        appMenu.setMenuLevel(menuLevel);
        appMenu.setSegment(segment);
        appMenu.setParent(parent);
        appMenu.setMenuIcon(menuIcon);
        appMenu.setVersion(0);
        appMenu.persist();

        return appMenu;
    }

    public static AppMenu AppMenu.updateAppMenu(Long menuId, String link, String menuTh, String menuEn, String controller, int menuLevel, int segment, long parent, String menuIcon) {
        AppMenu appMenu = AppMenu.findAppMenu(menuId);
        appMenu.setLink(link);
        appMenu.setMenu_t_name(menuTh);
        appMenu.setMenu_e_name(menuEn);
        appMenu.setController(controller);
        appMenu.setMenuLevel(menuLevel);
        appMenu.setSegment(segment);
        appMenu.setParent(parent);
        appMenu.setMenuIcon(menuIcon);
        appMenu.merge();

        return appMenu;
    }

    public static List<AppMenu> AppMenu.findMenuParent(int level) {
        EntityManager ent = AppMenu.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(AppMenu.class);
        if (level == 0) {
            criteria.add(Restrictions.eq("parent", 0L));
        } else if (level == 1) {
            DetachedCriteria subCriteria = DetachedCriteria.forClass(AppMenu.class);
            subCriteria.add(Restrictions.eq("parent", 0L));
            subCriteria.setProjection(Projections.property("id"));

            criteria.add(Subqueries.propertyIn("parent", subCriteria));
        }

        return criteria.list();
    }

    public static List<AppMenu> AppMenu.findMenuChildren(Long parentId) {
        EntityManager ent = AppMenu.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(AppMenu.class);
        criteria.add(Restrictions.eq("parent", parentId));
        return criteria.list();
    }

    public static boolean AppMenu.deleteMenu(Long menuId) {
        try {
            List<AppMenu> menuChildrenLv1 = AppMenu.findMenuChildren(menuId);
            
            for(AppMenu menuLv1 : menuChildrenLv1) {
                List<AppMenu> menuChildrenLv2 = AppMenu.findMenuChildren(menuLv1.getId());
                
                for(AppMenu menuLv2: menuChildrenLv2){
                    AppRoleMenu.deleteAppRoleMenu(menuLv2.getId());
                    AppMenu appMenuLv2 = AppMenu.findAppMenu(menuLv2.getId());
                    appMenuLv2.remove();
                }

                AppRoleMenu.deleteAppRoleMenu(menuLv1.getId());
                AppMenu appMenuLv1 = AppMenu.findAppMenu(menuLv1.getId());
                appMenuLv1.remove();
            }

            // Delete in AppRoleMenu table
            AppRoleMenu.deleteAppRoleMenu(menuId);

            // Delete in AppMenu table
            AppMenu appMenuLv0 = AppMenu.findAppMenu(menuId);
            appMenuLv0.remove();

            return true;

        } catch (Exception ex) {

        }
        return false;
    }

    public static List<AppMenu> AppMenu.findAppMenuByLink(String link) {
        EntityManager ent = AppMenu.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(AppMenu.class);
        criteria.add(Restrictions.eq("link", link));
        return criteria.list();
    }

    public static List<AppMenu> AppMenu.findAppMenuByController(String controller) {
        EntityManager ent = AppMenu.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(AppMenu.class);
        criteria.add(Restrictions.eq("controller", controller));
        return criteria.list();
    }

    public static List<AppMenu> AppMenu.findAppMenuBySequent(int sequent, int level, long parentId) {
        EntityManager ent = AppMenu.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(AppMenu.class);
        criteria.add(Restrictions.eq("menuLevel", level));
        criteria.add(Restrictions.eq("segment", sequent));
        criteria.add(Restrictions.eq("parent", parentId));
        return criteria.list();
    }

    public static Criteria AppMenu.findAppMenuByLevelPagging(int level) {
        Session session = (Session) AppMenu.entityManager().getDelegate();
        Criteria criteria = session.createCriteria(AppMenu.class);
        criteria.add(Restrictions.eq("menuLevel", level));
        return criteria;
    }

    public static List<AppMenu> AppMenu.findAppMenuByLevelPaggingData(int level, int firstResult, int maxResult) {
        Criteria criteria = AppMenu.findAppMenuByLevelPagging(level)
                .addOrder(Order.asc("parent"))
                .addOrder(Order.asc("segment"))
                .setFirstResult(firstResult)
                .setMaxResults(maxResult);
        return criteria.list();
    }

    public static Long AppMenu.findAppMenuByLevelPaggingSize(int level) {
        Criteria criteria = AppMenu.findAppMenuByLevelPagging(level)
                .setProjection(Projections.rowCount());
        return (Long) criteria.uniqueResult();
    }

    public static List<AppMenu> AppMenu.findAppMenuByRole(Long appRoleId) {
        DetachedCriteria subCriteria = DetachedCriteria.forClass(AppRoleMenu.class);
        subCriteria.add(Restrictions.eq("appRole.id", appRoleId));
        subCriteria.setProjection(Projections.distinct(Projections.property("appMenu")));

        EntityManager ent = AppMenu.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(AppMenu.class);
        criteria.add(Subqueries.propertyIn("id", subCriteria));
        criteria.addOrder(Order.asc("menuLevel"));
        criteria.addOrder(Order.asc("segment"));

        return criteria.list();
    }

}
