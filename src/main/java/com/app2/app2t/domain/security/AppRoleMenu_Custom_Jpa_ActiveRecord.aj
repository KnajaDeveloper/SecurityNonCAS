// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app2.app2t.domain.security;

import com.app2.app2t.domain.security.AppRoleMenu;

import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Subqueries;
import org.hibernate.sql.JoinType;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;

privileged aspect AppRoleMenu_Custom_Jpa_ActiveRecord {

    public static void AppRoleMenu.insertAppRoleMenu(AppMenu appMenu, AppRole appRole) {
        AppRoleMenu appRoleMenu = new AppRoleMenu();
        appRoleMenu.setAppMenu(appMenu);
        appRoleMenu.setAppRole(appRole);
        appRoleMenu.setVersion(0);
        appRoleMenu.persist();
    }

    public static void AppRoleMenu.deleteAppRoleMenu(Long menuId, Long roleId) {
        AppRoleMenu appRoleMenu = AppRoleMenu.findAppRoleMenuByMenuIdAndRoleId(menuId, roleId);
        appRoleMenu.remove();
    }

    public static void AppRoleMenu.deleteAppRoleMenu(Long menuId) {
        List<AppRoleMenu> listAppRoleMenu = AppRoleMenu.findAppRoleMenuByMenuId(menuId);
        for(AppRoleMenu appRoleMenu : listAppRoleMenu){
            appRoleMenu.remove();
        }
    }

    public static List<AppRoleMenu> AppRoleMenu.findAppRoleMenuByMenuId(Long menuId) {
        EntityManager ent = AppRoleMenu.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(AppRoleMenu.class, "AppRoleMenu");
        criteria.createAlias("AppRoleMenu.appMenu", "appMenu");
        criteria.add(Restrictions.eq("appMenu.id", menuId));

        return criteria.list();
    }

    public static AppRoleMenu AppRoleMenu.findAppRoleMenuByMenuIdAndRoleId(Long menuId, Long roleId) {
        EntityManager ent = AppRoleMenu.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(AppRoleMenu.class, "AppRoleMenu");
        criteria.createAlias("AppRoleMenu.appMenu", "appMenu");
        criteria.add(Restrictions.eq("appMenu.id", menuId));
        criteria.createAlias("AppRoleMenu.appRole", "appRole");
        criteria.add(Restrictions.eq("appRole.id", roleId));

        AppRoleMenu appRoleMenu = null;
        List<AppRoleMenu> appRoleMenuList = criteria.list();

        if(appRoleMenuList.size() > 0) {
            appRoleMenu = appRoleMenuList.get(0);
        }

        return appRoleMenu;
    }

    public static List<AppMenu> AppRoleMenu.findConstraintMenu() {
        DetachedCriteria subCriteria = DetachedCriteria.forClass(AppRoleMenu.class);
        subCriteria.setProjection(Projections.distinct(Projections.property("appMenu")));

        EntityManager ent = AppMenu.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(AppMenu.class, "AppMenu");
        criteria.add(Subqueries.propertyIn("AppMenu.id", subCriteria));

        return criteria.list();
    }

    public static List<AppRole> AppRoleMenu.findConstraintRole() {
        DetachedCriteria subCriteria = DetachedCriteria.forClass(AppRoleMenu.class);
        subCriteria.setProjection(Projections.distinct(Projections.property("appRole")));

        EntityManager ent = AppRole.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(AppRole.class, "AppRole");
        criteria.add(Subqueries.propertyIn("AppRole.id", subCriteria));

        return criteria.list();
    }
}
